// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import ObjectiveC;
@import CoreBluetooth;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIWindow;
@class UIApplication;
@class NSObject;
@class NSURL;
@class NSManagedObjectModel;
@class NSPersistentStoreCoordinator;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC19behavioralBluetooth11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * __nullable window;
- (BOOL)application:(UIApplication * __nonnull)application didFinishLaunchingWithOptions:(NSDictionary * __nullable)launchOptions;
- (void)applicationWillResignActive:(UIApplication * __nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * __nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * __nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * __nonnull)application;
- (void)applicationWillTerminate:(UIApplication * __nonnull)application;
@property (nonatomic, strong) NSURL * __nonnull applicationDocumentsDirectory;
@property (nonatomic, strong) NSManagedObjectModel * __nonnull managedObjectModel;
@property (nonatomic, strong) NSPersistentStoreCoordinator * __nonnull persistentStoreCoordinator;
@property (nonatomic, strong) NSManagedObjectContext * __nonnull managedObjectContext;
- (void)saveContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol LocalBehavioralSerialDeviceDelegate;
@class NSUUID;
@class CBPeripheral;


/// This hopefully provides some info
SWIFT_CLASS("_TtC19behavioralBluetooth27LocalBehavioralSerialDevice")
@interface LocalBehavioralSerialDevice : NSObject
@property (nonatomic, strong) id <LocalBehavioralSerialDeviceDelegate> __nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// ###Sets whether the connected serial device should be dismissed when the app enters the background.
///
/// \param allow Bool
- (void)setBackgroundConnection:(BOOL)allow;

/// ###Limits the local device as to how many remote devices can be connected at one time.
///
/// \param connectionLimit Integer representining the device connection limit.
- (void)setNumberOfConnectionsAllowed:(NSInteger)connectionLimit;

/// ###Controls automatica reconnect behavior.  If this option is set to true, the local device will attempt to automatically reconnect to all remote devices which lose connection.
///
/// \param enabled Should the reconnection be attempted.
///
/// \param tries An integer representing how many attempts should be made to reconnect before foreiting the connection.
///
/// \param timeBetweenTries Double representing how long of a delay is made before another attempt to reconnect is made.
- (void)setAutomaticReconnectOnDisconnect:(BOOL)enabled tries:(NSInteger)tries timeBetweenTries:(double)timeBetweenTries;

/// ###Controls automatic behavior for reconnecting to a remote device after failing to initially connect.  If this option is set to true, the local device will attempt to automatically reconnect to all remote devices which lose connection.
///
/// \param enabled Should the reconnection be attempted.
///
/// \param tries An integer representing how many attempts should be made to reconnect before foreiting the connection.
///
/// \param timeBetweenTries Double representing how long of a delay is made before another attempt to reconnect is made.
- (void)setRetryConnectAfterFail:(BOOL)enabled tries:(NSInteger)tries timeBetweenTries:(double)timeBetweenTries;

/// ###Attempts to last connected device, without discovery.
- (void)connectToLastConnected;

/// ###Writes data to a particular RemoteDevice
- (void)writeToDevice:(NSUUID * __nonnull)deviceOfInterest data:(NSString * __nonnull)data;

/// ###Clears all received data for a particular device from its respective local buffer.  Each remote device has its own received buffer contained within the LocalDevice object.
///
/// \param deviceOfInterest NSUUID of device buffer which should be flushed.
- (void)clearRxBuffer:(NSUUID * __nonnull)deviceOfInterest;

/// ###Check to see if any serial data has arrived from device of interest.
///
/// \param deviceOfInterest The NSUUID of the device which you would like to obtain serial data.
- (void)serialDataAvailable:(NSUUID * __nonnull)deviceOfInterest;

/// Returns a Dictionary object of discovered peripheral devices.
- (NSDictionary<NSUUID *, CBPeripheral *> * __nonnull)getdiscoveredDeviceDictionary;

/// Returns number of discovered devices
///
/// <code>if(bbObject.getNumberOfDiscoveredDevices() > 0){
///     connectDevice()
/// }
/// 
/// </code>
- (NSInteger)getNumberOfDiscoveredDevices;

/// Returns the discovered devices as an array.
- (NSArray<NSUUID *> * __nonnull)getDeviceListAsArray;

/// Provides the name of a particular discovered device as a String object.
///
/// <code>println(getDeviceName(myDeviceNSUUID))
/// 
/// </code>
/// <code>Output: myDevice
/// 
/// </code>
- (NSString * __nonnull)getDeviceName:(NSUUID * __nonnull)deviceOfInterest;

/// Returns the device's NSUUID as a String object.
///
/// <code>println(getDeviceUUIDAsString(myDeviceNSUUID)
/// 
/// </code>
/// <code>Output: BE5BA3D0-971C-4418-9ECF-E2D1ABCB66BE
/// 
/// </code>
- (NSString * __nonnull)getDeviceUUIDAsString:(NSUUID * __nonnull)deviceOfInterest;

/// Returns the device of interest's Radio Signal Strength Indicator (RSSI) as an integer.
///
/// <code>println(getDeviceRSSI(myDeviceNSUUID))
/// 
/// </code>
/// <code>Output: -56
/// 
/// </code>
/// This option is key for NFC imitation.  For example,
///
/// <a href="https://youtu.be/vcrPdhN9MJw"><img src="https://i.ytimg.com/vi/vcrPdhN9MJw/mqdefault.jpg" alt="iPhone Connects Based on Proximity"\></a>
- (NSInteger)getDeviceRSSI:(NSUUID * __nonnull)deviceOfInterest;

/// Returns true if already connected to the deviceOfInterest.
- (BOOL)alreadyConnected:(NSUUID * __nonnull)deviceNSUUID;
- (void)printDiscoveredDeviceListInfo;
- (void)printConnectedDevices;
@end


SWIFT_PROTOCOL("_TtP19behavioralBluetooth35LocalBehavioralSerialDeviceDelegate_")
@protocol LocalBehavioralSerialDeviceDelegate
@optional
- (void)searchTimerExpired;
- (void)deviceStatusChanged:(NSUUID * __nonnull)nsuuidOfDevice deviceState:(NSInteger)deviceState;
- (void)connectedToDevice;
@end


SWIFT_CLASS("_TtC19behavioralBluetooth15LocalPeripheral")
@interface LocalPeripheral : LocalBehavioralSerialDevice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19behavioralBluetooth21LocalBluetoothCentral")
@interface LocalBluetoothCentral : LocalPeripheral
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCentralManager;
@class CBService;
@class CBCharacteristic;
@class NSArray;


/// ##The Local Bluetooth LE Object
SWIFT_CLASS("_TtC19behavioralBluetooth23LocalBluetoothLECentral")
@interface LocalBluetoothLECentral : LocalPeripheral <CBPeripheralDelegate, CBCentralManagerDelegate>

/// ###Updates the the state of the Local Bluetooth LE device.
///
/// <ul><li>parameter</li></ul>
- (void)centralManagerDidUpdateState:(CBCentralManager * __nonnull)central;

/// Requests the Local Device connect to a Bluetooth LE Remote device of interest.  The call will assure a connection to the particular device doesn't exist.  If the connectionsLimit has not been reached.
- (BOOL)connectToDevice:(NSUUID * __nonnull)deviceNSUUID;
- (void)search:(NSTimeInterval)timeoutSecs;
- (void)connectToDevice:(CBService * __nonnull)serviceOfInterest characteristicOfInterest:(CBCharacteristic * __nonnull)characteristicOfInterest;
- (BOOL)disconnectFromPeriphera:(NSUUID * __nonnull)deviceOfInterest;

/// <code>println(getDeviceRSSI(myDeviceNSUUID))
/// 
/// </code>
/// <code>Output: -56
/// 
/// </code>
- (BOOL)getAdvDeviceConnectable:(NSUUID * __nonnull)deviceOfInterest;
- (NSString * __nonnull)getAdvDeviceName:(NSUUID * __nonnull)deviceOfInterest;
- (NSString * __nonnull)getAdvDeviceManufactureData:(NSUUID * __nonnull)deviceOfInterest;
- (NSArray<NSString *> * __nonnull)getAdvDeviceServiceData:(NSUUID * __nonnull)deviceOfInterest;
- (NSArray * __nonnull)getAdvDeviceServiceUUIDasNSArray:(NSUUID * __nonnull)deviceOfInterest;
- (NSInteger)getAdvTxPowerLevel:(NSUUID * __nonnull)deviceOfInterest;
- (NSArray * __nullable)getAdvSolicitedUUID:(NSUUID * __nonnull)deviceOfInterest;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19behavioralBluetooth26LocalBluetoothLEPeripheral")
@interface LocalBluetoothLEPeripheral : LocalPeripheral
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19behavioralBluetooth24LocalBluetoothPeripheral")
@interface LocalBluetoothPeripheral : LocalPeripheral
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19behavioralBluetooth12LocalCentral")
@interface LocalCentral : LocalBehavioralSerialDevice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC19behavioralBluetooth14ViewController")
@interface ViewController : UIViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
